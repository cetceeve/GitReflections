Reflections for lesson 2

>>>What happens when you initialize a repository? Why do you need to do it?<<<
a directory called .git is created in the current directory. 
it will store the meta-data of all files inside the directory for git to use.
it is necessary to use git on the directory.
with git status i can overfiew what git is currently doing or expecting me to do.

>>>How is the staging area different from the working directory and the repository? 
What value do you think it offers?<<<
the staging area sits between the working directory and the git repository
it allows me to decide which files while be saved with the next commit
its basically a way to costumize the commit.
i can add and remove files from the staging area using git add and git reset.

>>>How can you use the staging area to make sure you have one commit per logical change?<<<
by being able to use git diff and git diff --staged to compare between
working directory and the last commit, making it easier to see if a logical chage happend
i can also overfiew all the files a made changes to and maybe decide to split them up into two commits.

>>>What are some situations when branches would be helpful in keeping your history organized?
How would branches help?<<<
branches actually make it possible to stack several commits together on the same project
they create a sperate path, allowing to put stacks/branches in parallel to each other
branche are very useful when adding a lot of content that needs saves while creating it
so u are save to work on it while creating it like normal, but when the changes do not work out
there is still a working version one can imidiatly work on again.
also its possible to work on both branches in parallel making it possible to compare to
versions to each other while holding full flexibility.
looking for a more effective architecture or code for example.
notice: git.log will always show the ids on the current branch but 
you can checkout several paths using git log --graph --oneline [branch_1] [branch_2].
